erDiagram
  %% ---------- CORE IDENTITY ----------
  USER {
    uuid id PK
    string email
    string display_name
    jsonb last_context
    timestamp created_at
  }

  ORG {
    uuid id PK
    string name
    string status
    timestamp created_at
  }

  ACCOUNT {
    uuid id PK
    uuid org_id FK
    string name
    string plan
    string status
    boolean is_default
    timestamp created_at
  }

  MEMBERSHIP {
    uuid id PK
    uuid user_id FK
    uuid account_id FK
    string role
    timestamp created_at
  }

  ORG_ROLE {
    uuid id PK
    uuid user_id FK
    uuid org_id FK
    string role
    timestamp created_at
  }

  AUDIT_LOG {
    uuid id PK
    uuid actor_user_id
    string action
    uuid org_id
    uuid account_id
    uuid subject_id
    jsonb meta
    timestamp created_at
  }

  %% ---------- ACCESS CONTROL ----------
  SONG {
    uuid id PK
    uuid account_id FK
    string title
    string status
    timestamp created_at
  }

  SONG_ACL {
    uuid id PK
    uuid song_id FK
    uuid user_id FK
    string role
    jsonb caps
    timestamp created_at
  }

  %% ---------- SONGS & COLLAB ----------
  SONG_REVISION {
    uuid id PK
    uuid song_id FK
    uuid user_id FK
    boolean autosave
    uuid based_on_revision_id
    jsonb snapshot_or_delta
    string label
    timestamp created_at
  }

  SONG_CONTRIBUTION {
    uuid id PK
    uuid song_id FK
    uuid revision_id FK
    uuid user_id FK
    jsonb lines_changed
    jsonb meta
    timestamp created_at
  }

  SONG_COMMENT {
    uuid id PK
    uuid song_id FK
    uuid user_id FK
    uuid parent_id
    string text
    string status
    string anchor
    timestamp created_at
    timestamp updated_at
  }

  SONG_NOTE {
    uuid id PK
    uuid song_id FK
    uuid user_id FK
    string text
    timestamp created_at
  }

  SONG_CREDIT {
    uuid id PK
    uuid song_id FK
    uuid user_id FK
    string role
    timestamp created_at
  }

  SONG_ASSET {
    uuid id PK
    uuid song_id FK
    uuid user_id FK
    string file_url
    string type
    string hash
    timestamp created_at
  }

  %% ---------- SESSIONS & SPLITS ----------
  SONG_SESSION {
    uuid id PK
    uuid song_id FK
    timestamp start_at
    timestamp end_at
    string method
    string link
    string status
    timestamp created_at
  }

  SONG_INVITE {
    uuid id PK
    uuid session_id FK
    uuid inviter_user_id FK
    string invitee_email
    uuid invitee_user_id
    string token
    string status
    string ics_uid
    timestamp expires_at
    timestamp created_at
  }

  SONG_SESSION_PARTICIPANT {
    uuid id PK
    uuid session_id FK
    uuid user_id FK
    string status
    timestamp check_in_at
  }

  SONG_SPLIT_PROPOSAL {
    uuid id PK
    uuid song_id FK
    uuid session_id FK
    uuid proposer_id FK
    string scheme
    jsonb breakdown
    timestamp created_at
  }

  SONG_SPLIT_FINAL {
    uuid id PK
    uuid song_id FK
    uuid session_id FK
    int version
    jsonb breakdown
    timestamp effective_at
  }

  SONG_SPLIT_CHANGE {
    uuid id PK
    uuid song_id FK
    int from_version
    jsonb to_breakdown
    uuid actor_id FK
    string reason
    timestamp created_at
  }

  SONG_SPLIT_CONTEST {
    uuid id PK
    uuid song_id FK
    int version
    uuid filed_by FK
    string reason
    string status
    uuid decided_by
    timestamp decided_at
    timestamp created_at
  }

  %% ---------- BILLING & SEATS ----------
  PLAN_SUBSCRIPTION {
    uuid id PK
    string scope_type
    uuid scope_id
    string plan
    string status
    timestamp current_period_end
    timestamp created_at
  }

  CHECKOUT_SESSION {
    uuid id PK
    string scope_type
    uuid scope_id
    string plan
    string provider_session_id
    string status
    int amount
    string currency
    timestamp created_at
  }

  PAYMENT {
    uuid id PK
    string scope_type
    uuid scope_id
    string provider_charge_id
    int amount
    string currency
    string status
    timestamp created_at
  }

  SEAT_ALLOCATION {
    uuid id PK
    uuid org_id FK
    int seats_total
    int seats_available
    timestamp updated_at
  }

  SEAT_ASSIGNMENT {
    uuid id PK
    uuid org_id FK
    uuid user_id FK
    string seat_type
    string status
    timestamp assigned_at
  }

  %% ---------- COMMS & NOTIFICATIONS ----------
  COMM_TEMPLATE {
    uuid id PK
    string key
    string channel
    string locale
    int version
    text subject_tmpl
    text body_tmpl
    timestamp updated_at
  }

  NOTIFICATION {
    uuid id PK
    uuid user_id
    uuid org_id
    uuid account_id
    string channel
    string template_key
    jsonb payload_json
    string status
    string priority
    string dedupe_key
    int attempts
    timestamp next_attempt_at
    string last_error
    timestamp created_at
  }

  EMAIL_EVENT {
    uuid id PK
    uuid notification_id FK
    string provider
    string message_id
    string type
    jsonb meta_json
    timestamp ts
  }

  USER_NOTIFICATION_PREF {
    uuid id PK
    uuid user_id FK
    string channel
    string template_key
    boolean opt_in
    timestamp updated_at
  }

  ORG_NOTIFICATION_POLICY {
    uuid id PK
    uuid org_id FK
    string channel
    string template_key
    boolean is_enabled
    text cc_list
    text bcc_list
    jsonb silence_hours
    timestamp updated_at
  }

  %% ---------- RELATIONSHIPS (CROSS-DOMAIN) ----------
  ORG ||--o{ ACCOUNT : contains
  USER ||--o{ MEMBERSHIP : holds
  ACCOUNT ||--o{ MEMBERSHIP : includes
  USER ||--o{ ORG_ROLE : org_scope
  ORG ||--o{ ORG_ROLE : assigns

  ACCOUNT ||--o{ SONG : owns
  USER ||--o{ SONG_ACL : can_access
  SONG ||--o{ SONG_ACL : grants

  USER ||--o{ SONG_REVISION : writes
  SONG ||--o{ SONG_REVISION : has
  USER ||--o{ SONG_CONTRIBUTION : contributes
  SONG ||--o{ SONG_CONTRIBUTION : has
  USER ||--o{ SONG_COMMENT : comments
  SONG ||--o{ SONG_COMMENT : has
  USER ||--o{ SONG_NOTE : notes
  SONG ||--o{ SONG_NOTE : has
  USER ||--o{ SONG_CREDIT : credited
  SONG ||--o{ SONG_CREDIT : has
  USER ||--o{ SONG_ASSET : uploads
  SONG ||--o{ SONG_ASSET : has

  SONG ||--o{ SONG_SESSION : schedules
  SONG_SESSION ||--o{ SONG_INVITE : sends
  USER ||--o{ SONG_INVITE : creates
  SONG_SESSION ||--o{ SONG_SESSION_PARTICIPANT : has
  USER ||--o{ SONG_SESSION_PARTICIPANT : attends
  SONG ||--o{ SONG_SPLIT_PROPOSAL : proposes
  SONG ||--o{ SONG_SPLIT_FINAL : locks
  SONG ||--o{ SONG_SPLIT_CHANGE : changes
  USER ||--o{ SONG_SPLIT_CHANGE : acts
  SONG ||--o{ SONG_SPLIT_CONTEST : contests
  USER ||--o{ SONG_SPLIT_CONTEST : files

  ORG ||--o{ PLAN_SUBSCRIPTION : may_have
  ACCOUNT ||--o{ PLAN_SUBSCRIPTION : may_have
  ORG ||--o{ CHECKOUT_SESSION : starts
  ACCOUNT ||--o{ CHECKOUT_SESSION : starts
  ORG ||--o{ PAYMENT : records
  ACCOUNT ||--o{ PAYMENT : records
  ORG ||--o{ SEAT_ALLOCATION : manages
  ORG ||--o{ SEAT_ASSIGNMENT : assigns
  USER ||--o{ SEAT_ASSIGNMENT : receives

  COMM_TEMPLATE ||--o{ NOTIFICATION : renders
  NOTIFICATION ||--o{ EMAIL_EVENT : emits
  USER ||--o{ USER_NOTIFICATION_PREF : sets
  ORG ||--o{ ORG_NOTIFICATION_POLICY : sets

  USER ||--o{ AUDIT_LOG : acts
  ORG ||--o{ AUDIT_LOG : context
  ACCOUNT ||--o{ AUDIT_LOG : context
