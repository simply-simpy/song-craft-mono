/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SongsIndexRouteImport } from './routes/songs/index'
import { Route as SessionsIndexRouteImport } from './routes/sessions/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as SongsNewRouteImport } from './routes/songs/new'
import { Route as SignInSsoCallbackRouteImport } from './routes/sign-in/sso-callback'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminOrgsRouteImport } from './routes/admin/orgs'
import { Route as AdminAccountsRouteImport } from './routes/admin/accounts'
import { Route as SongsSongIdIndexRouteImport } from './routes/songs/$songId/index'
import { Route as SongsSongIdRecordRouteImport } from './routes/songs/$songId/record'
import { Route as SongsSongIdPackageRouteImport } from './routes/songs/$songId/package'
import { Route as SongsSongIdMidiRouteImport } from './routes/songs/$songId/midi'
import { Route as SongsSongIdLyricsRouteImport } from './routes/songs/$songId/lyrics'
import { Route as SongsSongIdCollabRouteImport } from './routes/songs/$songId/collab'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api.trpc.$'

const rootServerRouteImport = createServerRootRoute()

const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SongsIndexRoute = SongsIndexRouteImport.update({
  id: '/songs/',
  path: '/songs/',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionsIndexRoute = SessionsIndexRouteImport.update({
  id: '/sessions/',
  path: '/sessions/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const SongsNewRoute = SongsNewRouteImport.update({
  id: '/songs/new',
  path: '/songs/new',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInSsoCallbackRoute = SignInSsoCallbackRouteImport.update({
  id: '/sso-callback',
  path: '/sso-callback',
  getParentRoute: () => SignInRoute,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminOrgsRoute = AdminOrgsRouteImport.update({
  id: '/admin/orgs',
  path: '/admin/orgs',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminAccountsRoute = AdminAccountsRouteImport.update({
  id: '/admin/accounts',
  path: '/admin/accounts',
  getParentRoute: () => rootRouteImport,
} as any)
const SongsSongIdIndexRoute = SongsSongIdIndexRouteImport.update({
  id: '/songs/$songId/',
  path: '/songs/$songId/',
  getParentRoute: () => rootRouteImport,
} as any)
const SongsSongIdRecordRoute = SongsSongIdRecordRouteImport.update({
  id: '/songs/$songId/record',
  path: '/songs/$songId/record',
  getParentRoute: () => rootRouteImport,
} as any)
const SongsSongIdPackageRoute = SongsSongIdPackageRouteImport.update({
  id: '/songs/$songId/package',
  path: '/songs/$songId/package',
  getParentRoute: () => rootRouteImport,
} as any)
const SongsSongIdMidiRoute = SongsSongIdMidiRouteImport.update({
  id: '/songs/$songId/midi',
  path: '/songs/$songId/midi',
  getParentRoute: () => rootRouteImport,
} as any)
const SongsSongIdLyricsRoute = SongsSongIdLyricsRouteImport.update({
  id: '/songs/$songId/lyrics',
  path: '/songs/$songId/lyrics',
  getParentRoute: () => rootRouteImport,
} as any)
const SongsSongIdCollabRoute = SongsSongIdCollabRouteImport.update({
  id: '/songs/$songId/collab',
  path: '/songs/$songId/collab',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRouteWithChildren
  '/admin/accounts': typeof AdminAccountsRoute
  '/admin/orgs': typeof AdminOrgsRoute
  '/admin/users': typeof AdminUsersRoute
  '/sign-in/sso-callback': typeof SignInSsoCallbackRoute
  '/songs/new': typeof SongsNewRoute
  '/admin': typeof AdminIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/sessions': typeof SessionsIndexRoute
  '/songs': typeof SongsIndexRoute
  '/songs/$songId/collab': typeof SongsSongIdCollabRoute
  '/songs/$songId/lyrics': typeof SongsSongIdLyricsRoute
  '/songs/$songId/midi': typeof SongsSongIdMidiRoute
  '/songs/$songId/package': typeof SongsSongIdPackageRoute
  '/songs/$songId/record': typeof SongsSongIdRecordRoute
  '/songs/$songId': typeof SongsSongIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRouteWithChildren
  '/admin/accounts': typeof AdminAccountsRoute
  '/admin/orgs': typeof AdminOrgsRoute
  '/admin/users': typeof AdminUsersRoute
  '/sign-in/sso-callback': typeof SignInSsoCallbackRoute
  '/songs/new': typeof SongsNewRoute
  '/admin': typeof AdminIndexRoute
  '/projects': typeof ProjectsIndexRoute
  '/sessions': typeof SessionsIndexRoute
  '/songs': typeof SongsIndexRoute
  '/songs/$songId/collab': typeof SongsSongIdCollabRoute
  '/songs/$songId/lyrics': typeof SongsSongIdLyricsRoute
  '/songs/$songId/midi': typeof SongsSongIdMidiRoute
  '/songs/$songId/package': typeof SongsSongIdPackageRoute
  '/songs/$songId/record': typeof SongsSongIdRecordRoute
  '/songs/$songId': typeof SongsSongIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRouteWithChildren
  '/admin/accounts': typeof AdminAccountsRoute
  '/admin/orgs': typeof AdminOrgsRoute
  '/admin/users': typeof AdminUsersRoute
  '/sign-in/sso-callback': typeof SignInSsoCallbackRoute
  '/songs/new': typeof SongsNewRoute
  '/admin/': typeof AdminIndexRoute
  '/projects/': typeof ProjectsIndexRoute
  '/sessions/': typeof SessionsIndexRoute
  '/songs/': typeof SongsIndexRoute
  '/songs/$songId/collab': typeof SongsSongIdCollabRoute
  '/songs/$songId/lyrics': typeof SongsSongIdLyricsRoute
  '/songs/$songId/midi': typeof SongsSongIdMidiRoute
  '/songs/$songId/package': typeof SongsSongIdPackageRoute
  '/songs/$songId/record': typeof SongsSongIdRecordRoute
  '/songs/$songId/': typeof SongsSongIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/sign-in'
    | '/admin/accounts'
    | '/admin/orgs'
    | '/admin/users'
    | '/sign-in/sso-callback'
    | '/songs/new'
    | '/admin'
    | '/projects'
    | '/sessions'
    | '/songs'
    | '/songs/$songId/collab'
    | '/songs/$songId/lyrics'
    | '/songs/$songId/midi'
    | '/songs/$songId/package'
    | '/songs/$songId/record'
    | '/songs/$songId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sign-in'
    | '/admin/accounts'
    | '/admin/orgs'
    | '/admin/users'
    | '/sign-in/sso-callback'
    | '/songs/new'
    | '/admin'
    | '/projects'
    | '/sessions'
    | '/songs'
    | '/songs/$songId/collab'
    | '/songs/$songId/lyrics'
    | '/songs/$songId/midi'
    | '/songs/$songId/package'
    | '/songs/$songId/record'
    | '/songs/$songId'
  id:
    | '__root__'
    | '/'
    | '/sign-in'
    | '/admin/accounts'
    | '/admin/orgs'
    | '/admin/users'
    | '/sign-in/sso-callback'
    | '/songs/new'
    | '/admin/'
    | '/projects/'
    | '/sessions/'
    | '/songs/'
    | '/songs/$songId/collab'
    | '/songs/$songId/lyrics'
    | '/songs/$songId/midi'
    | '/songs/$songId/package'
    | '/songs/$songId/record'
    | '/songs/$songId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SignInRoute: typeof SignInRouteWithChildren
  AdminAccountsRoute: typeof AdminAccountsRoute
  AdminOrgsRoute: typeof AdminOrgsRoute
  AdminUsersRoute: typeof AdminUsersRoute
  SongsNewRoute: typeof SongsNewRoute
  AdminIndexRoute: typeof AdminIndexRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  SessionsIndexRoute: typeof SessionsIndexRoute
  SongsIndexRoute: typeof SongsIndexRoute
  SongsSongIdCollabRoute: typeof SongsSongIdCollabRoute
  SongsSongIdLyricsRoute: typeof SongsSongIdLyricsRoute
  SongsSongIdMidiRoute: typeof SongsSongIdMidiRoute
  SongsSongIdPackageRoute: typeof SongsSongIdPackageRoute
  SongsSongIdRecordRoute: typeof SongsSongIdRecordRoute
  SongsSongIdIndexRoute: typeof SongsSongIdIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/trpc/$'
  id: '__root__' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/songs/': {
      id: '/songs/'
      path: '/songs'
      fullPath: '/songs'
      preLoaderRoute: typeof SongsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sessions/': {
      id: '/sessions/'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof SessionsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/songs/new': {
      id: '/songs/new'
      path: '/songs/new'
      fullPath: '/songs/new'
      preLoaderRoute: typeof SongsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in/sso-callback': {
      id: '/sign-in/sso-callback'
      path: '/sso-callback'
      fullPath: '/sign-in/sso-callback'
      preLoaderRoute: typeof SignInSsoCallbackRouteImport
      parentRoute: typeof SignInRoute
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/orgs': {
      id: '/admin/orgs'
      path: '/admin/orgs'
      fullPath: '/admin/orgs'
      preLoaderRoute: typeof AdminOrgsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/accounts': {
      id: '/admin/accounts'
      path: '/admin/accounts'
      fullPath: '/admin/accounts'
      preLoaderRoute: typeof AdminAccountsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/songs/$songId/': {
      id: '/songs/$songId/'
      path: '/songs/$songId'
      fullPath: '/songs/$songId'
      preLoaderRoute: typeof SongsSongIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/songs/$songId/record': {
      id: '/songs/$songId/record'
      path: '/songs/$songId/record'
      fullPath: '/songs/$songId/record'
      preLoaderRoute: typeof SongsSongIdRecordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/songs/$songId/package': {
      id: '/songs/$songId/package'
      path: '/songs/$songId/package'
      fullPath: '/songs/$songId/package'
      preLoaderRoute: typeof SongsSongIdPackageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/songs/$songId/midi': {
      id: '/songs/$songId/midi'
      path: '/songs/$songId/midi'
      fullPath: '/songs/$songId/midi'
      preLoaderRoute: typeof SongsSongIdMidiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/songs/$songId/lyrics': {
      id: '/songs/$songId/lyrics'
      path: '/songs/$songId/lyrics'
      fullPath: '/songs/$songId/lyrics'
      preLoaderRoute: typeof SongsSongIdLyricsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/songs/$songId/collab': {
      id: '/songs/$songId/collab'
      path: '/songs/$songId/collab'
      fullPath: '/songs/$songId/collab'
      preLoaderRoute: typeof SongsSongIdCollabRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface SignInRouteChildren {
  SignInSsoCallbackRoute: typeof SignInSsoCallbackRoute
}

const SignInRouteChildren: SignInRouteChildren = {
  SignInSsoCallbackRoute: SignInSsoCallbackRoute,
}

const SignInRouteWithChildren =
  SignInRoute._addFileChildren(SignInRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SignInRoute: SignInRouteWithChildren,
  AdminAccountsRoute: AdminAccountsRoute,
  AdminOrgsRoute: AdminOrgsRoute,
  AdminUsersRoute: AdminUsersRoute,
  SongsNewRoute: SongsNewRoute,
  AdminIndexRoute: AdminIndexRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  SessionsIndexRoute: SessionsIndexRoute,
  SongsIndexRoute: SongsIndexRoute,
  SongsSongIdCollabRoute: SongsSongIdCollabRoute,
  SongsSongIdLyricsRoute: SongsSongIdLyricsRoute,
  SongsSongIdMidiRoute: SongsSongIdMidiRoute,
  SongsSongIdPackageRoute: SongsSongIdPackageRoute,
  SongsSongIdRecordRoute: SongsSongIdRecordRoute,
  SongsSongIdIndexRoute: SongsSongIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
